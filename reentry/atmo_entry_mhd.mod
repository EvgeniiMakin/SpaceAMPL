# Optimal MHD Control (Hermite-Simpson)
# Written by Alejandro Gonzalez Puerta (November 2015)

# AMPL Parameters
param n   			:= 20;			# Number of Nodes

# Constants
param pi			:= acos(-1);					# Definition of PI
param mu_E 			:= 3.986e14; 					# [m^3/s^2]		- Earth Gravitational Parameter

# Non-Dimentional Units
param length 		:= 6378136; 					# [m] 			- Earth Radius 
param time 			:= 2*pi*sqrt(length^3/mu_E); 	# [s] 			- Time
param velocity		:= sqrt(mu_E/length);			# [m/s]			- Velocity
param density		:= 1.225;						# [kg/m3]		- Sea Level Density	
param mass 			:= density*length^3;          	# [kg]          - Reference Mass
param acceleration	:= mu_E/length^2;				# [m/s^2]		- Gravitational Acceleration 
param force 		:= mass*acceleration;			# [N]

# Body Parameters
param m 			:= (8913)/mass;					# [-] 			- Vehicle Mass
param d            	:= 5/length; 					# [-]			- Capsule Diameter
param S            	:= pi*d^2/4;           		 	# [-]           - Reference Area
param RN           	:= 6.035/length;                # [-]           - Nose Radius

# Entry Conditions
param he          	:= (80e3)/length;               # [-]           - Altitude
param long_e     	:= 0;               			# [rad]         - Longitude
param lat_e     	:= 0;               			# [rad]         - Latitude
param ve          	:= (10e3)/velocity;             # [-]         	- Velocity
param gamma_e     	:= - 5*pi/180;               	# [rad]         - Flight Path Angle
param psi_e     	:= -45*pi/180;               	# [rad]         - Heading Angle

# Control Constants
param max_alpharate := 10*pi/180*time;				# [rad/s]       - Maximum Angle of Attack Time Rate
param max_sigmarate := 30*pi/180*time;				# [rad/s]       - Maximum Bank Angle Time Rate
param alpha_zero 	:= 0; 							# [rad] 		- Entry Angle of Attack
param sigma_zero 	:= 0; 							# [rad] 		- Entry Bank Angle
param min_alpha 	:= -40*pi/180; 				    # [rad] 		- Minimum Angle of Attack	

# Other Constants
param g0   			:= 1; 							# [-]			- Gravitational Acceleration
param R_E 			:= 1; 							# [-] 			- Earth Radius  
param rot_E 		:= 0;#(7.2921150e-5)*time;		# [-] 			- Earth Rotational Velocity 
param SLdensity		:= 1; 							# [-] 			- Base Density
param H 			:= 287*250/9.81/length;			# [-] 			- Atmospheric Scale Height
param tfinal		:= 400/time; 					# [-] 			- Final Time Guess
param heatflux_C    := 1.7415e-4; 					# [-] 			- Heat Flux Constant

# Plasma Constants
param ion_e 		:= 12; 							# [eV]  		- Ionization Energy (Species Dependent)
param emass			:= 9.1e-31;              		# [kg]          - Electronic Mass
param echarge 		:= 1.6e-19;              		# [C]           - Electronic Charge
param boltz 		:= 1.3806488e-23;        		# [m^2kg/Ks^2]  - Boltzmann Constant
param planck 		:= 6.62606957e-34;       		# [m^2kg/s]     - Plank Constant
param CCS 			:= 1e-19;

# MHD Constants
param max_B 		:= 0.0000001; 						# [T]  		    - Maximum Magnetic Field


param par1 			:= 0.00067;
param par2 			:= 0.061697;
param par3 			:= 0.017488;
param par4 			:= 0.17265;

param par5 			:= 0.57;
param par6 			:= 0.128;
param par7 			:= 0.70;

param Tcut 			:= 4000;
param heaviside_par := 0.01;
param heaviside_par2 := 20;
#---------------------------------------------------------------------------------------------------


# Sets
set I   			:= 1..n;
set J   			:= 1..n-1;
set G   			:= 2..n;
#---------------------------------------------------------------------------------------------------


# Variables
var     tf >= 0;
var     uu;

var    	 r{i in I};
var  theta{i in I};
var    phi{i in I};
var  	 V{i in I};
var	 gamma{i in I};
var	   psi{i in I};

var 	f1{i in I}; 
var 	f2{i in I}; 
var 	f3{i in I};
var 	f4{i in I};
var 	f5{i in I};
var 	f6{i in I};
var 	f7{i in I};
var 	f8{i in I};

var	    u1{i in I};
var	    u2{i in I};
var	    u3{i in I};

var  	rm{i in J};
var thetam{i in J};
var   phim{i in J};
var 	Vm{i in J};
var	gammam{i in J};
var	  psim{i in J};

var	   f1m{i in J}; 
var	   f2m{i in J}; 
var	   f3m{i in J};
var	   f4m{i in J};
var	   f5m{i in J};
var	   f6m{i in J};
var	   f7m{i in J};
var	   f8m{i in J};

var	   u1m{i in J};
var	   u2m{i in J};
var	   u3m{i in J};

# Supporting Variables
var 	 h{i in I} 	=  r[i] - R_E;
var 	hm{i in J} 	= rm[i] - R_E;

var    rho{i in I}	= SLdensity*exp( -h[i]/H);
var   rhom{i in J} 	= SLdensity*exp(-hm[i]/H);

var   alpha{i in I};
var  alpham{i in J};

var   sigma{i in I};
var  sigmam{i in J};

var     Cd{i in I} 	= - 0.0718 *  alpha[i]^5 - 0.6771 *  alpha[i]^4 - 2.1608 *  alpha[i]^3 - 2.4253 *  alpha[i]^2 - 0.1581 *  alpha[i] + 1.7072;
var    Cdm{i in J} 	= - 0.0718 * alpham[i]^5 - 0.6771 * alpham[i]^4 - 2.1608 * alpham[i]^3 - 2.4253 * alpham[i]^2 - 0.1581 * alpham[i] + 1.7072;

var     Cl{i in I} 	= 0.0777 *  alpha[i]^6  + 0.7629 *  alpha[i]^5 + 2.6522 *  alpha[i]^4 + 3.6395 *  alpha[i]^3 + 1.0828 *  alpha[i]^2 - 0.8108 *  alpha[i] + 0.0037;
var    Clm{i in J} 	= 0.0777 * alpham[i]^6  + 0.7629 * alpham[i]^5 + 2.6522 * alpham[i]^4 + 3.6395 * alpham[i]^3 + 1.0828 * alpham[i]^2 - 0.8108 * alpham[i] + 0.0037;

var    ClCd{i in I} = Cl[i]/Cd[i];
var   ClCdm{i in J} = Clm[i]/Cdm[i];

var   heatflux{i in I} = heatflux_C*sqrt( rho[i]/RN)* V[i]^3;
var  heatfluxm{i in J} = heatflux_C*sqrt(rhom[i]/RN)*Vm[i]^3;

# Plasma Variables - EVERYTHING IN DIMENSIONAL VARIABLES NOW
var 	Ts{i in I} = exp(( + 0.179472 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.651383 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.968414 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.067283 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.538141 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.323717 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.351728 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.434814 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.066183 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 1.176724 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.515854 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.154991 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.641797 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.400946 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.853997 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 1.457760 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.667772 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.077699 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.455470 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.053187 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -1.216006 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.154997 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.459596 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.486172 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.312162 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.867028 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.241369 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.964989 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + -1.393576 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.564525 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.150979 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.142596 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.010492 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.266716 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.003313 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.526431 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.560851 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.458809 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.248091 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.156863 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.243642 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.196171 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.555599 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.134647 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + -0.434430 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + 0.514623 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.199655 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.097927 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.010306 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.010040 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.060319 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.012367 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + -0.074732 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.020043 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.086957 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.271489 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.182267 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.054242 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.001432 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.034439 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.059255 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.086151 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.067003 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.162248 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.053917 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + 0.075929 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + -0.065305 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(11.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.023716 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.019050 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.006429 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.002880 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.007418 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.006337 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.001899 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.003842 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + 0.009916 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.004409 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + 0.002943 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(11.000000) + 0.039029 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(12.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.024604 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(11.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.003161 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.008140 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.002954 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.014287 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.004652 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.003443 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + -0.009496 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.012721 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.018345 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + 0.008762 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(11.000000) + -0.003261 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(12.000000))*1.61592596889 + 8.9015231208);
var 	Ps{i in I} = exp(( + 0.169224 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.247549 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.974138 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.106058 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.013063 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.056330 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.042586 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.039734 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.037434 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.052133 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.139667 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.088747 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.048791 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.072269 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.025954 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.163946 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.088703 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.012216 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.033485 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.071193 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.161979 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.243101 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.183128 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.048116 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.038928 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.078065 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.131450 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.050177 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + -0.160714 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.087383 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.003837 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.006812 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.006108 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.029066 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.054630 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.182031 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.185925 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.161925 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.028361 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.005816 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.014029 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.037767 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.065699 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.092398 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + -0.098157 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + 0.073721 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.032871 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.014855 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.003369 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.010169 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.000937 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.002769 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.010537 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.017443 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.073211 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.070435 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.060248 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.000191 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.000587 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.010911 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.005047 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.000602 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + -0.013181 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + -0.023695 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.027920 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + 0.045897 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + -0.011461 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(11.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.003650 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.004214 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.000957 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.003208 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.000159 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.000919 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.000138 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.000131 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.001392 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.001907 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + 0.009876 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(11.000000) + 0.009882 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(12.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.007610 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(11.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.001851 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.000074 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.003132 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.000505 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.000974 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.000456 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.000651 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + 0.001693 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + 0.002899 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + 0.003045 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(11.000000) + -0.006636 * ((V[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((h[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(12.000000))*4.9320559275513007 + 9.8982362005104303);;
var   rhos{i in I} = Ps[i]/287/Ts[i];

var    Tsm{i in J} = exp(( + 0.179472 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.651383 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.968414 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.067283 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.538141 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.323717 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.351728 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.434814 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.066183 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 1.176724 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.515854 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.154991 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.641797 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.400946 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.853997 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 1.457760 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.667772 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.077699 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.455470 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.053187 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -1.216006 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.154997 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.459596 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.486172 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.312162 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.867028 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.241369 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.964989 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + -1.393576 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.564525 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.150979 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.142596 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.010492 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.266716 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.003313 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.526431 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.560851 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.458809 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.248091 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.156863 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.243642 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.196171 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.555599 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.134647 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + -0.434430 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + 0.514623 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.199655 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.097927 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.010306 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.010040 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.060319 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.012367 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + -0.074732 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.020043 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.086957 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.271489 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.182267 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.054242 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.001432 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.034439 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.059255 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.086151 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.067003 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.162248 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.053917 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + 0.075929 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + -0.065305 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(11.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.023716 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.019050 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.006429 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.002880 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.007418 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.006337 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.001899 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.003842 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + 0.009916 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.004409 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + 0.002943 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(11.000000) + 0.039029 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(12.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.024604 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(11.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.003161 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.008140 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.002954 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.014287 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.004652 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.003443 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + -0.009496 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.012721 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.018345 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + 0.008762 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(11.000000) + -0.003261 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(12.000000))*1.61592596889 + 8.9015231208);
var	   Psm{i in J} = exp(( + 0.169224 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.247549 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.974138 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.106058 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.013063 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.056330 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.042586 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.039734 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.037434 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.052133 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.139667 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.088747 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.048791 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.072269 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.025954 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.163946 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.088703 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.012216 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.033485 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.071193 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.161979 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.243101 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.183128 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.048116 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.038928 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.078065 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.131450 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.050177 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + -0.160714 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.087383 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.003837 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.006812 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.006108 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.029066 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.054630 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.182031 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.185925 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.161925 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.028361 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.005816 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.014029 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.037767 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.065699 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.092398 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + -0.098157 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + 0.073721 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.032871 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.014855 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.003369 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.010169 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.000937 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.002769 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.010537 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.017443 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.073211 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.070435 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.060248 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.000191 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + 0.000587 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.010911 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.005047 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.000602 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + -0.013181 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + -0.023695 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.027920 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + 0.045897 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + -0.011461 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(11.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + -0.003650 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + 0.004214 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.000957 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + -0.003208 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + -0.000159 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + 0.000919 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.000138 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.000131 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + -0.001392 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + -0.001907 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + 0.009876 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(11.000000) + 0.009882 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(12.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(0.000000) + 0.007610 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(11.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(1.000000) + -0.001851 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(10.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(2.000000) + -0.000074 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(9.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(3.000000) + 0.003132 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(8.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(4.000000) + 0.000505 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(7.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(5.000000) + -0.000974 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(6.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(6.000000) + 0.000456 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(5.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(7.000000) + 0.000651 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(4.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(8.000000) + 0.001693 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(3.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(9.000000) + 0.002899 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(2.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(10.000000) + 0.003045 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(1.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(11.000000) + -0.006636 * ((Vm[i]*velocity/150 - 49.622417251755266)/28.815863181363916)^(0.000000) * ((hm[i]*length/1000 - 49.622417251755266)/28.815863181363916)^(12.000000))*4.9320559275513007 + 9.8982362005104303);
var  rhosm{i in J} = Psm[i]/287/Tsm[i];

var 	Kn{i in I} = 2 * (2*pi*emass*boltz*Ts[i]/planck/planck)^1.5  * exp(-ion_e*echarge/boltz/Ts[i]);
var    Knm{i in J} = 2 * (2*pi*emass*boltz*Tsm[i]/planck/planck)^1.5 * exp(-ion_e*echarge/boltz/Tsm[i]);

var 	  edensity{i in I} = -Kn[i] + sqrt(Kn[i]^2 + (Kn[i]*Ps[i])/(boltz*Ts[i]));
var      edensitym{i in J} = -Knm[i] + sqrt(Knm[i]^2 + (Knm[i]*Psm[i])/(boltz*Tsm[i]));

var 	  ndensity{i in I} = edensity[i]^2/Kn[i];
var      ndensitym{i in J} = edensitym[i]^2/Knm[i];

var   thermalspeed{i in I} = sqrt(2*boltz*Ts[i]/emass);
var  thermalspeedm{i in J} = sqrt(2*boltz*Tsm[i]/emass);

var 	    nu_tot{i in I} = CCS*thermalspeed[i]*ndensity[i];
var 	   nu_totm{i in J} = CCS*thermalspeedm[i]*ndensitym[i];

var 		iondeg{i in I} = edensity[i]/(edensity[i] + ndensity[i]);
var 	   iondegm{i in J} = edensitym[i]/(edensitym[i] + ndensitym[i]);

var    		 econd{i in I} = edensity[i] * echarge^2 /(emass * nu_tot[i]);
var    		econdm{i in J} = edensitym[i] * echarge^2 /(emass * nu_totm[i]);

var 	 heaviside{i in I} = 1 / (1 + exp(-2*heaviside_par*( Ts[i]-Tcut)));
var 	heavisidem{i in J} = 1 / (1 + exp(-2*heaviside_par*(Tsm[i]-Tcut)));

var 			 Q{i in I} =  econd[i]  * u3[i]^2 * d/  rho[i]/V[i]	 *length/density/velocity*  heaviside[i];
var 			Qm{i in J} = econdm[i] * u3m[i]^2 * d/rhom[i]/Vm[i]	 *length/density/velocity* heavisidem[i];

var 	 heaviside2{i in I} = 1 / (1 + exp(-2*heaviside_par2*( Q[i]-1)));
var 	heaviside2m{i in J} = 1 / (1 + exp(-2*heaviside_par2*(Qm[i]-1)));

var 		 Cdmag{i in I} = (par1 + par2*log(Q[i]) + par3*log(Q[i])^2 + par4*log(Q[i])^3) *  heaviside2[i];
var 		Cdmagm{i in J} = (par1 + par2*log(Q[i]) + par3*log(Q[i])^2 + par4*log(Q[i])^3) *  heaviside2m[i];

var 		 Clmag{i in I} = ClCd[i]*Cdmag[i];
var 		Clmagm{i in J} = ClCdm[i]*Cdmagm[i];

var 	    Cl_tot{i in I} = Cl[i] + Clmag[i];
var 	   Cl_totm{i in J} = Clm[i] + Clmagm[i];

var 	    Cd_tot{i in I} = Cd[i] + Cdmag[i];
var 	   Cd_totm{i in J} = Cdm[i] + Cdmagm[i];

var 		    FQ{i in I} = par5 + (1 - par5)*exp(-par6*Q[i]^par7);
var 	       FQm{i in J} = par5 + (1 - par5)*exp(-par6*Qm[i]^par7);

var 	 heatflux_tot{i in I} = heatflux[i]*FQ[i];
var 	heatflux_totm{i in J} = heatfluxm[i]*FQm[i];

# Lift and Drag
var      q{i in I} 	= 0.5*rho[i]*V[i]^2;
var      L{i in I} 	= q[i]*Cl_tot[i]*S;
var      D{i in I} 	= q[i]*Cd_tot[i]*S;

var     qm{i in J} 	=  0.5*rhom[i]*Vm[i]^2;
var     Lm{i in J} 	= qm[i]*Cl_totm[i]*S;
var     Dm{i in J} 	= qm[i]*Cd_totm[i]*S;

var   aeroload{i in I} = sqrt( L[i]^2 +  D[i]^2)/m/g0;
var  aeroloadm{i in J} = sqrt(Lm[i]^2 + Dm[i]^2)/m/g0;
#---------------------------------------------------------------------------------------------------


# Re-Entry Dynamics (Nodes)
subject to
	dynamics1{i in I}: f1[i] =  V[i]*sin(gamma[i]);
	dynamics2{i in I}: f2[i] =  V[i]*cos(gamma[i])*sin(psi[i])/r[i]/cos(phi[i]);
	dynamics3{i in I}: f3[i] =  V[i]*cos(gamma[i])*cos(psi[i])/r[i];
	dynamics4{i in I}: f4[i] = -D[i]/m - g0*sin(gamma[i]) + rot_E^2*r[i]*(sin(gamma[i])*cos(phi[i]) - cos(gamma[i])*sin(phi[i])*sin(psi[i]))*cos(phi[i]); 
	dynamics5{i in I}: f5[i] =  L[i]*cos(sigma[i])/V[i]/m - g0*cos(gamma[i])/V[i] + V[i]*cos(gamma[i])/r[i] + 2*rot_E*cos(phi[i])*cos(psi[i]) + rot_E^2*r[i]*cos(phi[i])*(cos(gamma[i])*cos(phi[i]) + sin(psi[i])*sin(phi[i])*sin(gamma[i]))/V[i];
	dynamics6{i in I}: f6[i] =  L[i]*sin(sigma[i])/V[i]/cos(gamma[i])/m - V[i]*cos(gamma[i])*cos(psi[i])*tan(phi[i])/r[i] + 2*rot_E*(tan(gamma[i])*cos(phi[i])*sin(psi[i]) - sin(phi[i])) + rot_E^2*r[i]*sin(phi[i])*cos(phi[i])*cos(psi[i])/V[i]/cos(gamma[i]);
	dynamics7{i in I}: f7[i] = u1[i];
	dynamics8{i in I}: f8[i] = u2[i];
#---------------------------------------------------------------------------------------------------


# Mid-Point State (Hermite)
subject to
	Hermite1{i in J}:
			rm[i] = (r[i]+r[i+1])/2 				+ tf/(n-1)/8 * (f1[i]-f1[i+1]);
	Hermite2{i in J}:
		thetam[i] = (theta[i]+theta[i+1])/2 		+ tf/(n-1)/8 * (f2[i]-f2[i+1]);
	Hermite3{i in J}:
		  phim[i] = (phi[i]+phi[i+1])/2 			+ tf/(n-1)/8 * (f3[i]-f3[i+1]);
	Hermite4{i in J}:
			Vm[i] = (V[i]+V[i+1])/2 				+ tf/(n-1)/8 * (f4[i]-f4[i+1]);
	Hermite5{i in J}:
		gammam[i] = (gamma[i]+gamma[i+1])/2 		+ tf/(n-1)/8 * (f5[i]-f5[i+1]);
	Hermite6{i in J}:
		  psim[i] = (psi[i]+psi[i+1])/2 			+ tf/(n-1)/8 * (f6[i]-f6[i+1]);
	Hermite7{i in J}:
	    alpham[i] = (alpha[i]+alpha[i+1])/2 		+ tf/(n-1)/8 * (f7[i]-f7[i+1]);
	Hermite8{i in J}:
	    sigmam[i] = (sigma[i]+sigma[i+1])/2 		+ tf/(n-1)/8 * (f8[i]-f8[i+1]);
#---------------------------------------------------------------------------------------------------


# Re-Entry Dynamics (Mid-Point)
subject to 
	dynamics1m{i in J}: f1m[i] =  Vm[i]*sin(gammam[i]);
	dynamics2m{i in J}: f2m[i] =  Vm[i]*cos(gammam[i])*sin(psim[i])/rm[i]/cos(phim[i]);
	dynamics3m{i in J}: f3m[i] =  Vm[i]*cos(gammam[i])*cos(psim[i])/rm[i];
	dynamics4m{i in J}: f4m[i] = -Dm[i]/m - g0*sin(gammam[i]) + rot_E^2*rm[i]*(sin(gammam[i])*cos(phim[i]) - cos(gammam[i])*sin(phim[i])*sin(psim[i]))*cos(phim[i]); 
	dynamics5m{i in J}: f5m[i] =  Lm[i]*cos(sigmam[i])/Vm[i]/m - g0*cos(gammam[i])/Vm[i] + Vm[i]*cos(gammam[i])/rm[i] + 2*rot_E*cos(phim[i])*cos(psim[i]) + rot_E^2*rm[i]*cos(phim[i])*(cos(gammam[i])*cos(phim[i]) + sin(psim[i])*sin(phim[i])*sin(gammam[i]))/Vm[i];
	dynamics6m{i in J}: f6m[i] =  Lm[i]*sin(sigmam[i])/Vm[i]/cos(gammam[i])/m - Vm[i]*cos(gammam[i])*cos(psim[i])*tan(phim[i])/rm[i] + 2*rot_E*(tan(gammam[i])*cos(phim[i])*sin(psim[i]) - sin(phim[i])) + rot_E^2*rm[i]*sin(phim[i])*cos(phim[i])*cos(psim[i])/Vm[i]/cos(gammam[i]);
	dynamics7m{i in J}: f7m[i] = u1m[i];
	dynamics8m{i in J}: f8m[i] = u2m[i];
#---------------------------------------------------------------------------------------------------


# Simpsons Rule
subject to
	SimpsonRule1{i in J}:
			r[i] = r[i+1] 		- tf/(n-1)/6 * (f1[i] + f1[i+1] + 4*f1m[i]);
	SimpsonRule2{i in J}:
		theta[i] = theta[i+1] 	- tf/(n-1)/6 * (f2[i] + f2[i+1] + 4*f2m[i]);
	SimpsonRule3{i in J}:
		  phi[i] = phi[i+1] 	- tf/(n-1)/6 * (f3[i] + f3[i+1] + 4*f3m[i]);
	SimpsonRule4{i in J}:
			V[i] = V[i+1] 		- tf/(n-1)/6 * (f4[i] + f4[i+1] + 4*f4m[i]);
	SimpsonRule5{i in J}:
		gamma[i] = gamma[i+1] 	- tf/(n-1)/6 * (f5[i] + f5[i+1] + 4*f5m[i]);
	SimpsonRule6{i in J}:
		  psi[i] = psi[i+1] 	- tf/(n-1)/6 * (f6[i] + f6[i+1] + 4*f6m[i]);
	SimpsonRule7{i in J}:
	    alpha[i] = alpha[i+1] 	- tf/(n-1)/6 * (f7[i] + f7[i+1] + 4*f7m[i]);
	SimpsonRule8{i in J}:
	    sigma[i] = sigma[i+1] 	- tf/(n-1)/6 * (f8[i] + f8[i+1] + 4*f8m[i]);
#---------------------------------------------------------------------------------------------------


# Control Constraints
subject to   aoa_limits{i in I}: 	     min_alpha <=  alpha[i] <= 0;		
subject to  aoa_limitsm{i in J}: 	     min_alpha <= alpham[i] <= 0;		

subject to  controls_u1{i in I}:	-max_alpharate <=  u1[i] 	<= max_alpharate;
subject to controls_u1m{i in J}:	-max_alpharate <= u1m[i] 	<= max_alpharate;

subject to  controls_u2{i in I}:	-max_sigmarate <=  u2[i] 	<= max_sigmarate;
subject to controls_u2m{i in J}:	-max_sigmarate <= u2m[i] 	<= max_sigmarate;

#subject to  controls_u3{i in I}:				 0 <=  u3[i] 	<= max_B;
#subject to controls_u3m{i in J}:				 0 <= u3m[i] 	<= max_B;

subject to  controls_u3{i in I}:				   u3[i] 	= max_B;
subject to controls_u3m{i in J}:				  u3m[i] 	= max_B;

subject to  controls_uu:							uu 	= gamma_e;
#---------------------------------------------------------------------------------------------------


# Initial Conditions
subject to initial_r:			  r[1] = he + R_E;
subject to initial_theta:	  theta[1] = long_e;
subject to initial_phi:		    phi[1] = lat_e;
subject to initial_V:			  V[1] = ve;
subject to initial_gamma:	  gamma[1] = uu;
subject to initial_psi:		  	psi[1] = psi_e;

subject to initial_alpha:     alpha[1] = alpha_zero;
subject to initial_alpham:   alpham[1] = alpha_zero;

subject to initial_sigma:     sigma[1] = sigma_zero;
subject to initial_sigmam:   sigmam[1] = sigma_zero;
#---------------------------------------------------------------------------------------------------


# Limits Conditions
subject to hlim{i in I}:	r[i]  >= R_E;
subject to Vlim{i in I}:	V[i]  >= 0;
subject to final_r:			r[n]   = R_E;
subject to final_V:			V[n]  <= 200/velocity;
#subject to aeroload_limits{i in I}:			aeroload[i]  <= 20;
#subject to aeroload_limitsm{i in J}:			aeroloadm[i]  <= 20;
#---------------------------------------------------------------------------------------------------

# Initial Guess
let 	 				r[1]  := he + R_E;
let {i in G} 			r[i]  := (1 - i/n)*he + R_E;
let {i in I}	 	theta[i]  := 0;
let {i in I}	 	  phi[i]  := 0;
let						V[1]  := ve;
let {i in G} 			V[i]  := (1 - i/n)*ve + 10/velocity;
let {i in I}	 	gamma[i]  := uu;
let {i in I}	 	  psi[i]  := psi_e;
let {i in I} 		alpha[i]  := alpha_zero;
let {i in I} 		sigma[i]  := sigma_zero;

let {i in J} 	   	   rm[i]  := (1 - i/n)*he + R_E;
let {i in J}	   thetam[i]  := 0;
let {i in J}	 	 phim[i]  := 0;
let {i in J} 	   	   Vm[i]  := (1 - i/n)*ve + 10/velocity;
let {i in J}	   gammam[i]  := uu;
let {i in J}	 	 psim[i]  := psi_e;
let {i in J} 	   alpham[i]  := alpha_zero;
let {i in J} 	   sigmam[i]  := sigma_zero;

let 	   			  	  uu  := gamma_e;
let {i in I} 	   	   u1[i]  := 0;
let {i in J} 	  	  u1m[i]  := 0;
let {i in I} 	   	   u2[i]  := 0;
let {i in J} 	  	  u2m[i]  := 0;
let {i in I} 	   	   u3[i]  := max_B;
let {i in J} 	  	  u3m[i]  := max_B;

let tf 			     	  := tfinal;
#---------------------------------------------------------------------------------------------------


# Objective Function
#minimize 			final_V: V[n];
#minimize 			cum_acc: sum{i in I} f4[i];
#minimize 			  power: sum{i in I} u1[i] * u1[i] + sum{i in J} u1m[i] * u1m[i];
#minimize  aerodynamic_load: sum{i in I} tf/(n-1) * aeroload[i];
minimize  aerodynamic_loadHS: sum{i in J} ((aeroload[i] + 4*aeroloadm[i] + aeroload[i+1]));
#---------------------------------------------------------------------------------------------------

	
# Solver Options
option solver snopt;
option substout 1;
option show_stats 1;
options snopt_options "outlev=2 Major_iterations=7000 Major_optimality_tolerance=1.0e-9 Major_feasibility_tolerance=1e-11";
solve;
#---------------------------------------------------------------------------------------------------

#display{i in I}			h[i]*length;
#display{i in I}		theta[i];
#display{i in I}		  phi[i];
#display{i in I}			V[i]*velocity;
#display{i in I}		gamma[i];
#display{i in I}		  psi[i];
#display{i in I}		  rho[i]*density;
#display{i in I}		   u1[i]*180/pi/time;
#display{i in I}	       u2[i]*180/pi/time;
#display{i in I}	   	   u3[i];
#display{i in I}	 heatflux[i]*sqrt(density)*velocity^3/sqrt(length);
#display{i in I}		   Ts[i];
#display{i in I}	       Ps[i];
#display{i in I}	   iondeg[i];
#display{i in I}	   	    Q[i];
#display{i in I}	   	Clmag[i];
#display{i in I}	   	Cdmag[i];
#display{i in I}	   	   FQ[i];
#display{i in I}	   	   heaviside2[i];

#display uu*180/pi;
display tf*time;
display tf*time/60;


# Print
for {i in I}{																									#			1		 2		3			  4		   5	  6		   7		8		9			  10		  11		12			13	  14   15	    16	  17		18		 19		   20		   21	  22		  23			   24											  25	   26    27    28									
printf "%e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e \n",length*r[i],theta[i],phi[i],velocity*V[i],gamma[i],psi[i],alpha[i],sigma[i],gamma_e,density*rho[i],force*L[i],force*D[i],aeroload[i],Ts[i],Q[i],Cdmag[i],u3[i],iondeg[i],econd[i],nu_tot[i],edensity[i], u1[i]/time, u2[i]/time,heatflux[i]*sqrt(density)*velocity^3/sqrt(length),Cdmag[i],Clmag[i],Cd[i],Cl[i],n,time*tf > final_nodesB0.out;
}
for {i in J}{
printf "%e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e, %e \n",length*rm[i],thetam[i],phim[i],velocity*Vm[i],gammam[i],psim[i],alpham[i],sigmam[i],gamma_e,density*rhom[i],force*Lm[i],force*Dm[i],aeroloadm[i],Tsm[i],Qm[i],Cdmagm[i],u3m[i],iondegm[i],econdm[i],nu_totm[i],edensitym[i], u1m[i]/time, u2m[i]/time,heatfluxm[i]*sqrt(density)*velocity^3/sqrt(length),Cdmagm[i],Clmagm[i],Cdm[i],Clm[i],n,time*tf > final_midpointsB0.out;
}